-- DROP DATABASE IF EXISTS tamara_store_db;
-- CREATE DATABASE tamara_store_db;

SET DATESTYLE to iso, DMY;

CREATE TABLE IF NOT EXISTS Personal_Data
(
    Customer_ID            bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
    Customer_Name          varchar(100) NOT NULL CHECK (Customer_Name ~ '^[А-Я][а-я -]+'),
    Customer_Surname       varchar(100) NOT NULL CHECK (Customer_Surname ~ '^[А-Я][а-я -]+'),
    Customer_Primary_Email varchar(100) UNIQUE CHECK (Customer_Primary_Email ~ '^\w+([-.'']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$'),
    Customer_Primary_Phone varchar(12) UNIQUE CHECK (Customer_Primary_Phone ~ '[+]?[0-9]+')
);

CREATE TABLE IF NOT EXISTS Cards
(
    Customer_Card_ID bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
    Customer_ID      bigint CHECK (Customer_ID > 0) REFERENCES Personal_Data (Customer_ID)
);

CREATE TABLE IF NOT EXISTS Group_SKU
(
    Group_ID   bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
    Group_Name varchar UNIQUE NOT NULL CHECK (Group_Name ~ '^[A-zА-я0-9_\/-]+$')
);

CREATE TABLE IF NOT EXISTS SKU
(
    SKU_ID   bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
    SKU_Name varchar(100) NOT NULL,
    Group_ID bigint CHECK (Group_ID >= 0) REFERENCES Group_SKU (Group_ID)
);

CREATE TABLE IF NOT EXISTS Stores
(
    Transaction_Store_ID bigint  NOT NULL CHECK (Transaction_Store_ID > 0),
    SKU_ID               bigint  NOT NULL CHECK (SKU_ID > 0) REFERENCES SKU (SKU_ID),
    SKU_Purchase_Price   numeric NOT NULL CHECK (SKU_Purchase_Price >= 0),
    SKU_Retail_Price     numeric NOT NULL CHECK (SKU_Purchase_Price >= 0),
    CONSTRAINT un_stores_transaction_store_id_sku_id UNIQUE (Transaction_Store_ID, SKU_ID)
);

CREATE TABLE IF NOT EXISTS Transactions
(
    Transaction_ID       bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
    Customer_Card_ID     bigint REFERENCES Cards (Customer_Card_ID),
    Transaction_Summ     numeric,
    Transaction_DateTime timestamp WITHOUT TIME ZONE,
    Transaction_Store_ID bigint
);

CREATE TABLE IF NOT EXISTS Checks
(
    Transaction_ID bigint  NOT NULL CHECK (Transaction_ID > 0) REFERENCES Transactions (Transaction_ID),
    SKU_ID         bigint  NOT NULL CHECK (SKU_ID > 0) REFERENCES SKU (SKU_ID),
    SKU_Amount     numeric NOT NULL CHECK (SKU_Amount > 0),
    SKU_Summ       numeric NOT NULL CHECK (SKU_Summ >= 0),
    SKU_Summ_Paid  numeric NOT NULL CHECK (SKU_Summ_Paid >= 0),
    SKU_Discount   numeric NOT NULL CHECK (SKU_Discount >= 0)
);

CREATE TABLE IF NOT EXISTS Date_Of_Analysis_Formation
(
    Analysis_Date timestamp WITHOUT TIME ZONE
);

CREATE TABLE IF NOT EXISTS Segments
(
    Segment            int,
    Average_Check      varchar(50) NOT NULL,
    Purchase_Frequency varchar(50) NOT NULL,
    Churn_Probability  varchar(50) NOT NULL
);

CREATE OR REPLACE PROCEDURE pr_export_to_csv(directory text, deltr char)
AS
$$
DECLARE
    str text;
BEGIN
    str := 'copy (select * from Personal_Data) TO ''' || directory || '/Personal_Data.csv'' DELIMITER ''' ||
           deltr ||
           '''';
    EXECUTE (str);
    str := 'copy (select * from cards) TO ''' || directory || '/Cards.csv'' DELIMITER ''' || deltr || '''';
    EXECUTE (str);
    str := 'copy (select * from SKU) TO ''' || directory || '/SKU.csv'' DELIMITER ''' || deltr || '''';
    EXECUTE (str);
    str := 'copy (select * from Stores) TO ''' || directory || '/Stores.csv'' DELIMITER ''' || deltr || '''';
    EXECUTE (str);
    str := 'copy (select * from checks) TO ''' || directory || '/Checks.csv'' DELIMITER ''' || deltr ||
           '''';
    EXECUTE (str);
    str := 'copy (select * from transactions) TO ''' || directory || '/Transactions.csv'' DELIMITER ''' ||
           deltr || '''';
    EXECUTE (str);
    str := 'copy (select * from Group_SKU) TO ''' || directory || '/Groups_SKU.csv'' DELIMITER ''' ||
           deltr || '''';
    EXECUTE (str);
    str := 'copy (select * from Date_Of_Analysis_Formation) TO ''' || directory || '/Date_Of_Analysis_Formation.csv'' DELIMITER ''' ||
           deltr || '''';
    EXECUTE (str);
    str := 'copy (select * from Segments) TO ''' || directory || '/Segment.csv'' DELIMITER ''' ||
           deltr || '''';
    EXECUTE (str);

END ;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE PROCEDURE pr_import_from_csv(directory text, deltr char)
AS
$$
DECLARE
    str text;
BEGIN
    SET session_replication_role = replica;
    str := 'copy cards FROM ''' || directory || '/Cards.csv'' DELIMITER ''' || deltr || '''';
    EXECUTE (str);
    str := 'copy Personal_Data FROM ''' || directory || '/Personal_Data.csv'' DELIMITER ''' ||
           deltr ||
           '''';
    EXECUTE (str);
    str := 'copy SKU FROM ''' || directory || '/SKU.csv'' DELIMITER ''' || deltr || '''';
    EXECUTE (str);
    str := 'copy Stores FROM ''' || directory || '/Stores.csv'' DELIMITER ''' || deltr || '''';
    EXECUTE (str);
    str := 'copy checks FROM ''' || directory || '/Checks.csv'' DELIMITER ''' || deltr ||
           '''';
    EXECUTE (str);
    str := 'copy transactions FROM ''' || directory || '/Transactions.csv'' DELIMITER ''' ||
           deltr || '''';
    EXECUTE (str);
    str := 'copy Group_SKU FROM ''' || directory || '/Groups_SKU.csv'' DELIMITER ''' ||
           deltr || '''';
    EXECUTE (str);
    str := 'copy Date_Of_Analysis_Formation FROM ''' || directory || '/Date_Of_Analysis_Formation.csv'' DELIMITER ''' ||
           deltr || '''';
    EXECUTE (str);
    str := 'copy Segments FROM ''' || directory || '/Segment.csv'' DELIMITER ''' ||
           deltr || '''';
    EXECUTE (str);
    SET session_replication_role = origin;
END ;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE PROCEDURE pr_export_to_tsv(directory text)
AS
$$
DECLARE
    str text;
BEGIN
    str := 'copy (select * from cards) TO ''' || directory || '/Cards.tsv'' DELIMITER E''\t''';
    EXECUTE (str);
    str := 'copy (select * from Personal_Data) TO ''' || directory ||
           '/Personal_Data.tsv''  DELIMITER E''\t''';
    EXECUTE (str);
    str := 'copy (select * from SKU) TO ''' || directory || '/SKU.tsv''  DELIMITER E''\t''';
    EXECUTE (str);
    str := 'copy (select * from Stores) TO ''' || directory || '/Stores.tsv''  DELIMITER E''\t''';
    EXECUTE (str);
    str := 'copy (select * from checks) TO ''' || directory || '/Checks.tsv''  DELIMITER E''\t''';
    EXECUTE (str);
    str := 'copy (select * from transactions) TO ''' || directory ||
           '/Transactions.tsv''  DELIMITER E''\t''';
    EXECUTE (str);
    str := 'copy (select * from Group_SKU) TO ''' || directory || '/Groups_SKU.tsv''  DELIMITER E''\t''';
    EXECUTE (str);
    str := 'copy (select * from Date_Of_Analysis_Formation) TO ''' || directory || '/Date_Of_Analysis_Formation.tsv''  DELIMITER E''\t''';
    EXECUTE (str);
    str := 'copy (select * from Segments) TO ''' || directory || '/Segment.tsv''  DELIMITER E''\t''';
    EXECUTE (str);
END ;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE PROCEDURE pr_import_from_tsv_mini(directory text)
AS
$$
DECLARE
    str text;
BEGIN
    SET session_replication_role = replica;
    str := 'copy Personal_Data FROM ''' || directory || '/Personal_Data_Mini.tsv'' DELIMITER E''\t''';
    EXECUTE (str);
    str := 'copy cards FROM ''' || directory || '/Cards_Mini.tsv'' DELIMITER E''\t''';
    EXECUTE (str);
    str := 'copy SKU FROM ''' || directory || '/SKU_Mini.tsv'' DELIMITER E''\t''';
    EXECUTE (str);
    str := 'copy Stores FROM ''' || directory || '/Stores_Mini.tsv'' DELIMITER E''\t''';
    EXECUTE (str);
    str := 'copy checks FROM ''' || directory || '/Checks_Mini.tsv'' DELIMITER E''\t''';
    EXECUTE (str);
    str := 'copy transactions FROM ''' || directory || '/Transactions_Mini.tsv'' DELIMITER E''\t''';
    EXECUTE (str);
    str := 'copy Group_SKU FROM ''' || directory || '/Groups_SKU_Mini.tsv'' DELIMITER E''\t''';
    EXECUTE (str);
    str := 'copy Date_Of_Analysis_Formation FROM ''' || directory || '/Date_Of_Analysis_Formation.tsv'' DELIMITER E''\t''';
    EXECUTE (str);
    str := 'copy Segments FROM ''' || directory || '/Segment.tsv'' DELIMITER E''\t''';
    EXECUTE (str);
    SET session_replication_role = origin;
END ;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE PROCEDURE pr_import_from_tsv(directory text)
AS
$$
DECLARE
    str text;
BEGIN
    SET session_replication_role = replica;
    str := 'copy Personal_Data FROM ''' || directory || '/Personal_Data.tsv'' DELIMITER E''\t''';
    EXECUTE (str);
    str := 'copy cards FROM ''' || directory || '/Cards.tsv'' DELIMITER E''\t''';
    EXECUTE (str);
    str := 'copy SKU FROM ''' || directory || '/SKU.tsv'' DELIMITER E''\t''';
    EXECUTE (str);
    str := 'copy Stores FROM ''' || directory || '/Stores.tsv'' DELIMITER E''\t''';
    EXECUTE (str);
    str := 'copy checks FROM ''' || directory || '/Checks.tsv'' DELIMITER E''\t''';
    EXECUTE (str);
    str := 'copy transactions FROM ''' || directory || '/Transactions.tsv'' DELIMITER E''\t''';
    EXECUTE (str);
    str := 'copy Group_SKU FROM ''' || directory || '/Groups_SKU.tsv'' DELIMITER E''\t''';
    EXECUTE (str);
    str := 'copy Date_Of_Analysis_Formation FROM ''' || directory || '/Date_Of_Analysis_Formation.tsv'' DELIMITER E''\t''';
    EXECUTE (str);
    str := 'copy Segments FROM ''' || directory || '/Segment.tsv'' DELIMITER E''\t''';
    EXECUTE (str);

    SET session_replication_role = origin;
END;
$$ LANGUAGE plpgsql;

CALL pr_import_from_tsv_mini('#  PATH TO THE DIRECTORY ');
